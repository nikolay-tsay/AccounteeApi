// <auto-generated />
using System;
using AccounteeDomain.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccounteeApi.Migrations
{
    [DbContext(typeof(AccounteeContext))]
    [Migration("20230103102523_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "category_targets", new[] { "product", "income", "outcome", "service" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "measurement_units", new[] { "piece", "milliliter", "litre", "kilogram", "milligram", "gram" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccounteeDomain.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IdCompany", "Name", "Target")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.CompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("numeric");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.IncomeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("IdCategory")
                        .HasColumnType("integer");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<int?>("IdService")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastEdited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdService");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.OutcomeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IdCategory")
                        .HasColumnType("integer");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastEdited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdCompany");

                    b.ToTable("Outcomes");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("AmountUnit")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("IdCategory")
                        .HasColumnType("integer");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdCompany", "Name")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.Relational.IncomeProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<int>("IdIncome")
                        .HasColumnType("integer");

                    b.Property<int>("IdProduct")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdIncome");

                    b.HasIndex("IdProduct");

                    b.ToTable("IncomeProducts");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.Relational.OutcomeProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<int>("IdOutcome")
                        .HasColumnType("integer");

                    b.Property<int>("IdProduct")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdOutcome");

                    b.HasIndex("IdProduct");

                    b.ToTable("OutcomeProducts");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.Relational.ServiceProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<int>("IdProduct")
                        .HasColumnType("integer");

                    b.Property<int>("IdService")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PricePerService")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ProductUsedAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdService");

                    b.ToTable("ServiceProducts");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.Relational.UserIncomeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<int>("IdIncome")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdIncome");

                    b.HasIndex("IdUser");

                    b.ToTable("UserIncomes");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.Relational.UserServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<int>("IdService")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdService");

                    b.HasIndex("IdUser");

                    b.ToTable("UserServices");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanCreateCategories")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanCreateCompany")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanCreateOutlay")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanCreateProducts")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanCreateRoles")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanCreateServices")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteCategories")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteCompany")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteOutlay")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteProducts")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteRoles")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteServices")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEditCategories")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEditCompany")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEditOutlay")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEditProducts")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEditRoles")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEditServices")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEditUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanReadCategories")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanReadOutlay")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanReadProducts")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanReadRoles")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanReadServices")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanReadUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRegisterUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUploadFiles")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany", "Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanCreateCategories = false,
                            CanCreateCompany = true,
                            CanCreateOutlay = false,
                            CanCreateProducts = false,
                            CanCreateRoles = false,
                            CanCreateServices = false,
                            CanDeleteCategories = false,
                            CanDeleteCompany = false,
                            CanDeleteOutlay = false,
                            CanDeleteProducts = false,
                            CanDeleteRoles = false,
                            CanDeleteServices = false,
                            CanDeleteUsers = false,
                            CanEditCategories = false,
                            CanEditCompany = false,
                            CanEditOutlay = false,
                            CanEditProducts = false,
                            CanEditRoles = false,
                            CanEditServices = false,
                            CanEditUsers = false,
                            CanReadCategories = false,
                            CanReadOutlay = false,
                            CanReadProducts = false,
                            CanReadRoles = false,
                            CanReadServices = false,
                            CanReadUsers = false,
                            CanRegisterUsers = false,
                            CanUploadFiles = false,
                            IsAdmin = false,
                            Name = "Visitor"
                        });
                });

            modelBuilder.Entity("AccounteeDomain.Entities.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("IdCategory")
                        .HasColumnType("integer");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdCompany", "Name")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<int>("IdRole")
                        .HasColumnType("integer");

                    b.Property<decimal?>("IncomePercent")
                        .HasColumnType("numeric");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdCompany", "Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.CategoryEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("CategoryList")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.IncomeEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CategoryEntity", "IncomeCategory")
                        .WithMany("IncomeList")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("IncomeList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccounteeDomain.Entities.ServiceEntity", "Service")
                        .WithMany("IncomeList")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");

                    b.Navigation("IncomeCategory");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.OutcomeEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CategoryEntity", "OutcomeCategory")
                        .WithMany("OutcomeList")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("OutcomeList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");

                    b.Navigation("OutcomeCategory");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.ProductEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CategoryEntity", "ProductCategory")
                        .WithMany("ProductList")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("ProductList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.Relational.IncomeProductEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("IncomeProductList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccounteeDomain.Entities.IncomeEntity", "Income")
                        .WithMany("IncomeProductList")
                        .HasForeignKey("IdIncome")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccounteeDomain.Entities.ProductEntity", "Product")
                        .WithMany("IncomeProductList")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Income");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.Relational.OutcomeProductEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("OutcomeProductList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccounteeDomain.Entities.OutcomeEntity", "Outcome")
                        .WithMany("OutcomeProductList")
                        .HasForeignKey("IdOutcome")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccounteeDomain.Entities.ProductEntity", "Product")
                        .WithMany("OutcomeProductList")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Outcome");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.Relational.ServiceProductEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("ServiceProductList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccounteeDomain.Entities.ProductEntity", "Product")
                        .WithMany("ServiceProductList")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccounteeDomain.Entities.ServiceEntity", "Service")
                        .WithMany("ServiceProductList")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.Relational.UserIncomeEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("UserIncomeList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccounteeDomain.Entities.IncomeEntity", "Income")
                        .WithMany("UserIncomeList")
                        .HasForeignKey("IdIncome")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccounteeDomain.Entities.UserEntity", "User")
                        .WithMany("UserIncomeList")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Income");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.Relational.UserServiceEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("UserServiceList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccounteeDomain.Entities.ServiceEntity", "Service")
                        .WithMany("UserServiceList")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccounteeDomain.Entities.UserEntity", "User")
                        .WithMany("UserServiceList")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.RoleEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("RoleList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.ServiceEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CategoryEntity", "ServiceCategory")
                        .WithMany("ServiceList")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("ServiceList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.UserEntity", b =>
                {
                    b.HasOne("AccounteeDomain.Entities.CompanyEntity", "Company")
                        .WithMany("UserList")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AccounteeDomain.Entities.RoleEntity", "Role")
                        .WithMany("UserList")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.CategoryEntity", b =>
                {
                    b.Navigation("IncomeList");

                    b.Navigation("OutcomeList");

                    b.Navigation("ProductList");

                    b.Navigation("ServiceList");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.CompanyEntity", b =>
                {
                    b.Navigation("CategoryList");

                    b.Navigation("IncomeList");

                    b.Navigation("IncomeProductList");

                    b.Navigation("OutcomeList");

                    b.Navigation("OutcomeProductList");

                    b.Navigation("ProductList");

                    b.Navigation("RoleList");

                    b.Navigation("ServiceList");

                    b.Navigation("ServiceProductList");

                    b.Navigation("UserIncomeList");

                    b.Navigation("UserList");

                    b.Navigation("UserServiceList");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.IncomeEntity", b =>
                {
                    b.Navigation("IncomeProductList");

                    b.Navigation("UserIncomeList");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.OutcomeEntity", b =>
                {
                    b.Navigation("OutcomeProductList");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.ProductEntity", b =>
                {
                    b.Navigation("IncomeProductList");

                    b.Navigation("OutcomeProductList");

                    b.Navigation("ServiceProductList");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.RoleEntity", b =>
                {
                    b.Navigation("UserList");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.ServiceEntity", b =>
                {
                    b.Navigation("IncomeList");

                    b.Navigation("ServiceProductList");

                    b.Navigation("UserServiceList");
                });

            modelBuilder.Entity("AccounteeDomain.Entities.UserEntity", b =>
                {
                    b.Navigation("UserIncomeList");

                    b.Navigation("UserServiceList");
                });
#pragma warning restore 612, 618
        }
    }
}
